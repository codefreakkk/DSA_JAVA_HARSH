package recursion;

public class CombinationSum {
    static void isS
    static void solve(int[] nums, int target, int index, List<Integer> output, List<List<Integer>> answer) {
        if(index >= nums.length) {
            if(target == 0) {
                answer.add(output);
            }
            return;
        }
        if((target - nums[index]) > 0) {
            output.add(nums[index]);
            solve(nums, target - nums[i], index, output, answer);
        }
        output.remove(output.size() - 1);
        solve(nums, target, index + 1, output, answer);
    }
    static List<List<Integer>> combinationSum(int[] nums, int target) {
        List<List<Integer>> answer = new ArrayList<>();
        List<Integer> output = new ArrayList<>();
        solve(nums, target, 0, output, answer);
        return answer;
    }
    public static void main(String[] args) {

    }
}
