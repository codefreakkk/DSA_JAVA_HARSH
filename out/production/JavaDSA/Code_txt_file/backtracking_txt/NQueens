package recursion.backtracking;

public class NQueens {
    static boolean isSafeToMove(boolean[][] board, int row, int col) {
        for(int i = 0; i < row; i++) {
            if(board[i][col]) {
                return false;
            }
        }
        int maxLeft = Math.min(row, col);
        for(int i = 0; i < maxLeft; i++) {
            if(board[--row][--col]) {
                return false;
            }
        }
        int maxRight = Math.min(row, board.length - col - 1);
        for(int i = 0; i < maxRight; i++) {
            if(board[--row][++col]) {
                return false;
            }
        }
        return true;
    }
    static int queens(boolean[][] board, int row) {
        if(row == board.length) {
            display(board);
            return 1;
        }
        int count = 0;
        for(int i = 0; i < board[0].length; i++) {
            if(isSafeToMove(board, row, i)) {
                board[row][i] = true;
                count += quuens(board, row + 1);
                board[row][i] = false;
            }
        }
        return count;
    }
    public static void main(String[] args) {

    }
}
